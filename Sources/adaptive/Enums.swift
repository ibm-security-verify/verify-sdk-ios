//
// Copyright contributors to the IBM Security Verify Adaptive SDK for iOS project
//

import Foundation

/// The assessment response status type.
public struct AssessmentStatusType {
    /// A requires assessment indicates an additional evaluation step using a `AllowedFactors` or `EnrolledFactors` instance.
    public static let requires: String = "requires"
    
    /// The assessment is allowed and no further evaluation is needed.
    public static let allow: String = "allow"
    
    /// The assessment denied.  This indicates the end of the assessment.
    public static let deny = "deny"
}

/// A type of factor required to authenticate.
public enum FactorType: String {
    /// A QR code required to perform an evaluation.
    case qr
    /// Username and password method.
    case password
    /// An agreed seed value between both client and server.
    case totp
    /// A one-time passcode generated by the server and delivered via email.
    case emailotp
    /// A one-time passcode generated by the server and delivered via SMS.
    case smsotp
    /// Fast Identity On-line (FIDO) method requiring a hardware based token.
    case fido2
    /// An out of band authentication method.
    case multifactor
    /// Knowledge questions that a user will know the anwser.
    case questions
    /// An unknown factor was provided.
    case unknown
}

extension FactorType: Decodable {
    /// Creates a new instance by decoding from the given decoder.
    /// - Parameter decoder: The decoder to read data from.
    /// - Remark: This initializer throws an error if reading from the decoder fails, or if the data read is corrupted or otherwise invalid.
    public init(from decoder: Decoder) throws {
        let value = try decoder.singleValueContainer().decode(String.self)
        self = FactorType.init(rawValue: value) ?? FactorType.unknown
    }
}

/// A type of factor required to authenticate a one-time passcode.
public enum OneTimePasscodeType: String {
    /// An agreed seed value between both client and server.
    case totp
    /// A one-time passcode generated by the server and delivered via email.
    case emailotp
    /// A one-time passcode generated by the server and delivered via SMS.
    case smsotp
}
